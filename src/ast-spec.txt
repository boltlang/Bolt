
node EndOfFile > BoltToken, JSToken;
node Token;
node SourceFile;
node FunctionBodyElement;
node ReturnStatement;

// Bolt language AST definitions

node BoltSyntax;

node BoltToken > Token, BoltSyntax;

node BoltStringLiteral > BoltToken {
  value: String,
}

node BoltIntegerLiteral > BoltToken {
  value: Int,
}

node BoltSymbol > BoltToken;

node BoltIdentifier > BoltSymbol {
  text: String,
}

node BoltOperatorLike > BoltSymbol;

node BoltOperator > BoltSymbol {
  text: String,
}

node BoltAssignment > BoltToken {
  operator: Option<String>,
}

node BoltComma      > BoltToken;
node BoltSemi       > BoltToken;
node BoltColon      > BoltToken;
node BoltColonColon > BoltToken;
node BoltDot        > BoltToken;
node BoltDotDot     > BoltToken;
node BoltRArrow     > BoltToken;
node BoltRArrowAlt  > BoltToken;
node BoltLArrow     > BoltToken;
node BoltEqSign     > BoltToken;

node BoltGtSign    > BoltToken, BoltOperatorLike;
node BoltExMark    > BoltToken, BoltOperatorLike;
node BoltLtSign    > BoltToken, BoltOperatorLike;
node BoltVBar      > BoltToken, BoltOperatorLike;

node BoltKeyword;

node BoltWhereKeyword   > BoltToken, BoltKeyword;
node BoltQuoteKeyword   > BoltToken, BoltKeyword;
node BoltFnKeyword      > BoltToken, BoltKeyword;
node BoltForeignKeyword > BoltToken, BoltKeyword;
node BoltForKeyword     > BoltToken, BoltKeyword;
node BoltLetKeyword     > BoltToken, BoltKeyword;
node BoltReturnKeyword  > BoltToken, BoltKeyword;
node BoltLoopKeyword    > BoltToken, BoltKeyword;
node BoltYieldKeyword   > BoltToken, BoltKeyword;
node BoltMatchKeyword   > BoltToken, BoltKeyword;
node BoltImportKeyword  > BoltToken, BoltKeyword;
node BoltExportKeyword  > BoltToken, BoltKeyword;
node BoltPubKeyword     > BoltToken, BoltKeyword;
node BoltModKeyword     > BoltToken, BoltKeyword;
node BoltMutKeyword     > BoltToken, BoltKeyword;
node BoltEnumKeyword    > BoltToken, BoltKeyword;
node BoltStructKeyword  > BoltToken, BoltKeyword;
node BoltTypeKeyword    > BoltToken, BoltKeyword;
node BoltTraitKeyword   > BoltToken, BoltKeyword;
node BoltImplKeyword    > BoltToken, BoltKeyword;

node BoltPunctuated > BoltToken {
  text: String,
}

node BoltParenthesized > BoltPunctuated;
node BoltBraced > BoltPunctuated;
node BoltBracketed > BoltPunctuated;

node BoltSourceFile > BoltSyntax, SourceFile {
  elements: Vec<BoltSourceElement>,
  pkg: Package,
}

node BoltQualName > BoltSyntax {
  isAbsolute: bool,
  modulePath: Vec<BoltIdentifier>,
  name: BoltSymbol,
}

node BoltTypeExpression > BoltSyntax;

node BoltTypeOfExpression > BoltTypeExpression {
  expression: BoltExpression,
}

node BoltReferenceTypeExpression > BoltTypeExpression {
  name: BoltQualName,
  typeArgs: Option<Vec<BoltTypeExpression>>,
}

node BoltFunctionTypeExpression > BoltTypeExpression {
  params: Vec<BoltParameter>,
  returnType: Option<BoltTypeExpression>,
}

node BoltLiftedTypeExpression > BoltTypeExpression {
  expression: BoltExpression, 
}

node BoltTypeParameter > BoltSyntax {
  index: usize,
  name: BoltIdentifier,
  typeExpr: Option<BoltTypeExpression>,
  defaultType: Option<BoltTypeExpression>,
}

node BoltPattern > BoltSyntax;

node BoltBindPattern > BoltPattern {
  name: BoltIdentifier,
}

node BoltTypePattern > BoltPattern {
  typeExpr: BoltTypeExpression,
  nestedPattern: BoltPattern,
}

node BoltExpressionPattern > BoltPattern {
  expression: BoltExpression,
}

node BoltTuplePatternElement > BoltSyntax {
  index: usize,
  pattern: BoltPattern,
}

node BoltTuplePattern > BoltPattern {
  elements: Vec<BoltTuplePatternElement>,
}

node BoltRecordFieldPattern > BoltSyntax {
  isRest: bool,
  name: Option<BoltIdentifier>,
  pattern: Option<BoltPattern>,
}

node BoltRecordPattern > BoltPattern {
  name: BoltTypeExpression,
  fields: Vec<BoltRecordFieldPattern>,
}

node BoltExpression > BoltSyntax;

node BoltQuoteExpression > BoltExpression {
  tokens: Vec<Token | BoltExpression>,
}

node BoltTupleExpression > BoltExpression {
  elements: Vec<BoltExpression>,
}

node BoltReferenceExpression > BoltExpression {
  name: BoltQualName,
}

node BoltMemberExpression > BoltExpression {
  expression: BoltExpression,
  path: Vec<BoltIdentifier>,
}

node BoltFunctionExpression > BoltExpression {
  params: Vec<BoltParameter>,
  returnType: Option<BoltTypeExpression>,
  body: Vec<BoltFunctionBodyElement>,
}

node BoltCallExpression > BoltExpression {
  operator: BoltExpression,
  operands: Vec<BoltExpression>,
}

node BoltYieldExpression > BoltExpression {
  value: BoltExpression,
}

node BoltMatchArm > BoltSyntax {
  pattern: BoltPattern,
  body: BoltExpression,
}

node BoltMatchExpression > BoltExpression {
  value: BoltExpression,
  arms: Vec<BoltMatchArm>,
}

node BoltCase > BoltSyntax {
  test: BoltExpression,
  result: BoltExpression,
}

node BoltCaseExpression > BoltExpression {
  cases: Vec<BoltCase>,
}

node BoltBlockExpression > BoltExpression {
  elements: Vec<BoltFunctionBodyElement>,
}

node BoltConstantExpression > BoltExpression {
  value: BoltValue,
}

node BoltStatement > BoltSyntax, BoltFunctionBodyElement, BoltSourceElement;

node BoltReturnStatement > ReturnStatement, BoltStatement {
  value: Option<BoltExpression>,
}

node BoltConditionalCase > BoltSyntax {
  test: Option<BoltExpression>,
  body: Vec<BoltFunctionBodyElement>,
}

node BoltConditionalStatement > BoltStatement {
  cases: Vec<BoltConditionalCase>,
}

node BoltResumeStatement > BoltStatement {
  value: BoltExpression,
}

node BoltExpressionStatement > BoltStatement {
  expression: BoltExpression,
}

node BoltParameter > BoltSyntax {
  index: usize,
  bindings: BoltPattern,
  typeExpr: Option<BoltTypeExpression>,
  defaultValue: Option<BoltExpression>,
}

node BoltDeclaration > BoltSyntax, BoltSourceElement;

node BoltTypeDeclaration > BoltSyntax, BoltSourceElement;

enum BoltModifiers {
  IsMutable   = 0x1,
  IsPublic    = 0x2,
}

node BoltModule > BoltSyntax, BoltSourceElement {
  modifiers: BoltModifiers,
  name: Vec<BoltIdentifier>,
  elements: Vec<BoltSourceElement>,
}

node BoltDeclarationLike;

node BoltFunctionBodyElement > FunctionBodyElement;

node BoltFunctionDeclaration > BoltFunctionBodyElement, BoltDeclaration, BoltDeclarationLike, BoltTraitOrImplElement {
  modifiers: BoltModifiers,
  target: String,
  name: BoltSymbol,
  params: Vec<BoltParameter>,
  returnType: Option<BoltTypeExpression>,
  typeParams: Option<Vec<BoltTypeParameter>>,
  body: Vec<BoltFunctionBodyElement>,
}

node BoltVariableDeclaration > BoltFunctionBodyElement, BoltDeclaration, BoltDeclarationLike {
  modifiers: BoltModifiers,
  bindings: BoltPattern,
  typeExpr: Option<BoltTypeExpression>,
  value: Option<BoltExpression>,
}

node BoltImportSymbol > BoltSyntax;

node BoltPlainImportSymbol > BoltImportSymbol {
  remote: BoltQualName,
  local: BoltSymbol,
}

node BoltImportDirective > BoltSourceElement {
  modifiers: BoltModifiers,
  file: BoltStringLiteral,
  symbols: Option<Vec<BoltImportSymbol>>,
}

node BoltExportSymbol > BoltSyntax;

node BoltPlainExportSymbol {
  local: BoltQualName,
  remote: BoltSymbol,
}

node BoltExportDirective > BoltSourceElement {
  file: String,
  symbols: Option<Vec<BoltExportSymbol>>,
}

node BoltTraitOrImplElement;

node BoltTraitDeclaration > BoltDeclarationLike, BoltTypeDeclaration {
  modifiers: BoltModifiers,
  typeParams: Option<Vec<BoltTypeParameter>>,
  name: BoltIdentifier,
  typeBoundExpr: Option<BoltTypeExpression>,
  elements: Option<Vec<BoltDeclaration>>,
}

node BoltImplDeclaration > BoltTypeDeclaration, BoltDeclarationLike {
  modifiers: BoltModifiers,
  typeParams: Option<Vec<BoltTypeParameter>>,
  name: BoltIdentifier,
  traitTypeExpr: Option<BoltTypeExpression>,
  elements: Vec<BoltDeclaration>,
}

node BoltTypeAliasDeclaration > BoltDeclarationLike, BoltTypeDeclaration, BoltTraitOrImplElement {
  modifiers: BoltModifiers,
  name: BoltIdentifier,
  typeParams: Option<Vec<BoltTypeParameter>>,
  typeExpr: BoltTypeExpression,
}

node BoltRecordMember > BoltSyntax;

node BoltRecordField > BoltRecordMember {
  name: BoltIdentifier,
  typeExpr: BoltTypeExpression,
}

node BoltRecordDeclaration > BoltDeclaration, BoltTypeDeclaration, BoltDeclarationLike {
  modifiers: BoltModifiers,
  name: BoltIdentifier,
  typeParms: Option<Vec<BoltTypeParameter>>,
  members: Option<Vec<BoltRecordMember>>,
}

node BoltSourceElement;

node BoltMacroCall > BoltRecordMember, BoltSourceElement, BoltTraitOrImplElement, BoltFunctionBodyElement {
  name: BoltIdentifier,
  text: String,
}

// JavaScript AST definitions

node JSSyntax;

node JSToken > JSSyntax, Token;

node JSIdentifier > JSToken {
  text: String,
}

node JSString > JSToken {
  value: String,
}

node JSInteger > JSToken {
  value: Int,
}

node JSFromKeyword > JSToken;
node JSReturnKeyword > JSToken;
node JSTryKeyword > JSToken;
node JSFinallyKeyword > JSToken;
node JSCatchKeyword > JSToken;
node JSImportKeyword > JSToken;
node JSAsKeyword > JSToken;
node JSConstKeyword > JSToken;
node JSLetKeyword > JSToken;
node JSExportKeyword > JSToken;
node JSFunctionKeyword > JSToken;
node JSWhileKeyword > JSToken;
node JSForKeyword > JSToken;

node JSOperatorLike;

node JSOperator > JSToken {
  text: String,
}

node JSCloseBrace > JSToken;
node JSCloseBracket > JSToken;
node JSCloseParen > JSToken;
node JSOpenBrace > JSToken;
node JSOpenBracket > JSToken;
node JSOpenParen > JSToken;
node JSSemi > JSToken;
node JSComma > JSToken;
node JSDot > JSToken;
node JSDotDotDot > JSToken;
node JSMulOp > JSToken, JSOperatorLike;
node JSAddOp > JSToken, JSOperatorLike;
node JSDivOp > JSToken, JSOperatorLike;
node JSSubOp > JSToken, JSOperatorLike;
node JSLtOp > JSToken, JSOperatorLike;
node JSGtOp > JSToken, JSOperatorLike;
node JSBOrOp > JSToken, JSOperatorLike;
node JSBXorOp > JSToken, JSOperatorLike;
node JSBAndOp > JSToken, JSOperatorLike;
node JSBNotOp > JSToken, JSOperatorLike;
node JSNotOp > JSToken, JSOperatorLike;

node JSPattern > JSSyntax;

node JSBindPattern > JSPattern {
  name: JSIdentifier,
}

node JSExpression > JSSyntax;

node JSConstantExpression > JSExpression {
  value: BoltValue,
}

node JSMemberExpression > JSExpression {
  value: JSExpression,
  property: JSIdentifier,
}

node JSCallExpression > JSExpression {
  operator: JSExpression,
  operands: Vec<JSExpression>,
}

node JSBinaryExpression > JSExpression {
  left: JSExpression,
  operator: JSOperator,
  right: JSExpression,
}

node JSUnaryExpression > JSExpression {
  operator: JSOperator,
  operand: JSExpression
}

node JSNewExpression > JSExpression {
  target: JSExpression,
  args: Vec<JSExpression>,
}

node JSSequenceExpression > JSExpression {
  expressions: Vec<JSExpression>,
}

node JSConditionalExpression > JSExpression {
  test: JSExpression,
  consequent: JSExpression,
  alternate: JSExpression,
}

node JSLiteralExpression > JSExpression {
  value: JSValue,
}

node JSReferenceExpression > JSExpression {
  name: String,
}

node JSSourceElement;

node JSFunctionBodyElement > FunctionBodyElement;

node JSStatement > JSSyntax, JSSourceElement, JSFunctionBodyElement;

node JSCatchBlock > JSSyntax {
  bindings: Option<JSPattern>,
  elements: Vec<JSSourceElement>,
}

node JSTryCatchStatement > JSSyntax {
  tryBlock: Vec<JSSourceElement>,
  catchBlock: Option<JSCatchBlock>,
  finalBlock: Option<Vec<JSSourceElement>>,
}

node JSExpressionStatement > JSStatement {
  expression: JSExpression,
}

node JSConditionalCase > JSSyntax {
  test: Option<JSExpression>,
  body: Vec<JSFunctionBodyElement>,
}

node JSConditionalStatement > JSStatement {
  cases: Vec<JSConditionalCase>,
}

node JSReturnStatement > ReturnStatement, JSStatement {
  value: Option<JSExpression>,
}

node JSParameter > JSSyntax {
  index: usize,
  bindings: JSPattern,
  defaultValue: Option<JSExpression>,
}

node JSDeclaration > JSSyntax, JSSourceElement;

enum JSDeclarationModifiers {
  IsExported = 0x1,
}

node JSImportBinding > JSSyntax;

node JSImportStarBinding > JSImportBinding {
  local: JSIdentifier,
}

node JSImportAsBinding > JSImportBinding {
  remote: JSIdentifier,
  local: Option<JSIdentifier>,
}

node JSImportDeclaration > JSDeclaration {
  bindings: Vec<JSImportBinding>,
  filename: JSString,
}

node JSFunctionDeclaration > JSDeclaration, JSFunctionBodyElement {
  modifiers: JSDeclarationModifiers,
  name: JSIdentifier,
  params: Vec<JSParameter>,
  body: Vec<JSStatement>,
}

node JSArrowFunctionDeclaration > JSDeclaration, JSFunctionBodyElement {
  name: JSIdentifier,
  params: Vec<JSParameter>,
  body: JSExpression,
}

node JSLetDeclaration > JSDeclaration, JSFunctionBodyElement {
  bindings: JSPattern,
  value: Option<JSExpression>,
}

node JSSourceFile > JSSyntax, SourceFile {
  elements: Vec<JSSourceElement>,
} 
