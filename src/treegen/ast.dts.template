
import { TypeInfo } from "./types"
import { Package } from "./common"
import { TextSpan } from "./text"

export function setParents(node: Syntax): void;

export type SyntaxRange = [Syntax, Syntax];

export function isSyntax(value: any): value is Syntax;

interface SyntaxBase<K extends SyntaxKind> {
  id: number;
  kind: K
  _typeInfo: TypeInfo;
  parentNode: Syntax | null;
  span: TextSpan | null;
  preorder(): IterableIterator<Syntax>;
  getChildNodes(): IterableIterator<Syntax>,
  findAllChildrenOfKind<K1 extends SyntaxKind>(kind: K1): IterableIterator<ResolveSyntaxKind<K1>>;
}

export type ResolveSyntaxKind<K extends SyntaxKind> = Extract<Syntax, { kind: K }>;


